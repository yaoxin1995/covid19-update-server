version: '3.5'
services:
  telegram-notification-service:
    container_name: telegram-notification-service
    build:
      context: ./telegram-notification-service
    environment:
      - FLASK_APP=app.py
      - DB_FILE_PATH=./db/db.sql
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_NOTIFICATION_SERVICE_TELEGRAM_BOT_TOKEN}
      - AUTH0_ISS=${TELEGRAM_NOTIFICATION_SERVICE_AUTH0_ISS}
      - AUTH0_AUD=${TELEGRAM_NOTIFICATION_SERVICE_AUTH0_AUD}
      # Define messages for each message type
      - WELCOME_MESSAGE=Welcome, {{ USER_FULL_NAME }}! You are now able to configure {{ SERVICE_NAME }} via Telegram.
        Go to your dashboard and add the Telegram notification provider by entering this ID {{ USER_CHAT_ID }}.
      - UNKNOWN_MESSAGE=Sorry, {{ USER_FULL_NAME }}. I didn't understand you.
      # Use template variables (prefix TEMPLATE_VAR_)
      - TEMPLATE_VAR_SERVICE_NAME=COVID-19 incidence update notifications
    volumes:
      # Persist notification database
      - notification-service-db:/opt/notification-service/db:rw
    command: flask run --host=0.0.0.0 --port 80
    restart: unless-stopped

  covid19-update-service:
    container_name: covid19-update-service
    build:
      context: ./covid19-update-service
    environment:
      - DB_TYPE=sqlite3
      - DB_SOURCE=./storage/storage.db?_foreign_keys=on
      - SERVER_PORT=9005
      - POLL_INTERVAL_MINUTES=60
      - TELEGRAM_CONTACT_URI=${COVID19_UPDATE_SERVICE_TELEGRAM_CONTACT_URI}
      - TELEGRAM_AUTH0_AUD=${COVID19_UPDATE_SERVICE_TELEGRAM_AUTH0_AUD}
      - TELEGRAM_AUTH0_CLIENT_ID=${COVID19_UPDATE_SERVICE_TELEGRAM_AUTH0_CLIENT_ID}
      - TELEGRAM_AUTH0_CLIENT_SECRET=${COVID19_UPDATE_SERVICE_TELEGRAM_AUTH0_CLIENT_SECRET}
      - TELEGRAM_AUTH0_TOKEN_URL=${COVID19_UPDATE_SERVICE_TELEGRAM_AUTH0_TOKEN_URL}
      - SENDGRID_API_KEY=${COVID19_UPDATE_SERVICE_SENDGRID_API_KEY}
      - SENDGRID_EMAIL=${COVID19_UPDATE_SERVICE_SENDGRID_EMAIL}
      - AUTH0_ISS=${COVID19_UPDATE_SERVICE_AUTH0_ISS}
      - AUTH0_AUD=${COVID19_UPDATE_SERVICE_AUTH0_AUD}
      - CORS_ORIGINS=
    volumes:
      - covid19-update-service-db:/app/storage:rw

  dashboard-service:
    container_name: dashboard-service
    #build: ./dashboard-service/django_project/
    build:
      context: ./dashboard-service/django_project
    environment:
      # covid19-update-service:9005
      - server_address=${DEPLOYMENT_SERVER_IP_ADDRESS}
      - auth-url=scc2020g8.eu.auth0.com
      - ALLOWED_HOSTS=${DEPLOYMENT_SERVER_IP_ADDRESS}
    volumes:
    - dashboard-service-db:/code/db:rw
    command: python manage.py runserver 0.0.0.0:8000
    restart: unless-stopped

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      # Include certificate dir needed for HTTPS support
      - ./nginx/cert:/etc/nginx/cert:ro
    ports:
      - 443:443
      - 80:80
    restart: unless-stopped

# Use Swagger.io UI for manual api tests
# Comment in the following line if you want to start Swagger editor container.
#x-disabled:
  swagger-ui:
      container_name: swagger-ui
      image: swaggerapi/swagger-ui
      environment:
        # Use multiple api docs
        - "URLS=[{ url:  './api/covid19-update-service.yaml', name: 'Covid19 Update Service'},
                 { url: './api/telegram-notification-service.yaml', name: 'Telegram Notification Service'}]"
      volumes:
        - ./covid19-update-service/doc/openapi.yaml:/usr/share/nginx/html/api/covid19-update-service.yaml
        - ./telegram-notification-service/docs/api.yaml:/usr/share/nginx/html/api/telegram-notification-service.yaml
      restart: unless-stopped

volumes:
  notification-service-db:
  covid19-update-service-db:
  dashboard-service-db:
